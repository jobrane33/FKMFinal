using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using FKM_2022.crudAlgoClasses;
using FKM_2022.referntiel;
using SautinSoft.Document;

namespace FKM_2022.exploitation
{
    public partial class ValidationQuanzaineSuperieur : Form
    {
        private string matricule = connection.getMatricule;
        private string fileResult = @"C:\Users\job_j\Downloads\Result.pdf";
        public ValidationQuanzaineSuperieur()
        {
            InitializeComponent();
            dataGridView1.ReadOnly = false;
            dataGridView1.Enabled = true;
        }
        
        private void GeneratePDFbonQZ(string code, string referance ,string montant , string date ,string nomPrenom)
        {
            crudAlgoClasses.crudUser cu = new crudAlgoClasses.crudUser();
            
            string filePath = @"C:\Users\job_j\Downloads\Présentation1.pdf";
            
            DocumentCore dc = DocumentCore.Load(filePath);

            // Find a position to insert text. Before this text: "> in this position".
            ContentRange cr = dc.Content.Find("<").FirstOrDefault();
            ContentRange cr2 = dc.Content.Find("+").FirstOrDefault();
            ContentRange cr3 = dc.Content.Find("@").FirstOrDefault();
            ContentRange cr4 = dc.Content.Find("-").FirstOrDefault();
            ContentRange cr5 = dc.Content.Find("*").FirstOrDefault();
            // Insert new text.
            if (cr != null)
                cr.Start.Insert(montant);
            if (cr2 != null)
                cr2.Start.Insert(referance);
            if (cr3 != null)
                cr3.Start.Insert(nomPrenom);
            if (cr4 != null)
                cr4.Start.Insert(date);
            if (cr5 != null)
                cr5.Start.Insert(code);
            dc.Save(fileResult); 
            //System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(fileResult) { UseShellExecute = true });
        }
        

        private void ValidationQuanzaineSuperieur_Load_1(object sender, EventArgs e)
        {
            crudUser cru = new crudUser();
            DataTable dt = new DataTable();
            dt = cru.selectQuinzainesAvalider(matricule);
            dataGridView1.DataSource = dt;
        }

        private void roundBtn1_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (Convert.ToBoolean(row.Cells[dataGridView1.Columns["checkBoxCol"].Index].Value))
                {
                    //MessageBox.Show(row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString());
                    crudAlgoClasses.crudUser cu = new crudAlgoClasses.crudUser();
                    bool result = cu.validationSuperieurHearchique(row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString());
                    if (result)
                    {
                        MessageBox.Show("valider avec success pour " + row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString(), "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        string referance = row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString();
                        string montant = row.Cells[dataGridView1.Columns["Montant"].Index].Value.ToString();
                        string Submatricule= row.Cells[dataGridView1.Columns["matriculePerso"].Index].Value.ToString();
                        var bonResult=cu.insertionBonQZ(referance, montant, Submatricule, matricule);
                        if (bonResult)
                        {
                            MessageBox.Show("Genaration avec success du Bon : " + row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString(), "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            
                            crudAlgoClasses.crudUser cru = new crudAlgoClasses.crudUser();
                            String[] resultArray = cu.getvaluesForBOnQZ(referance);
                            if (resultArray.Length > 0)
                            {
                                var resRef = resultArray[0].ToString();
                                var resNomPrenom = resultArray[1].ToString();
                                var resMontant = resultArray[2].ToString();
                                var resDateGeneration = resultArray[3].ToString();
                                var resCode = resultArray[5].ToString();
                                this.GeneratePDFbonQZ(resCode, resRef, resMontant,resDateGeneration,resNomPrenom);
                            }
                            bool testdoc =cru.stockPDFBonQZ(fileResult, referance);
                            if (testdoc)
                            {
                                MessageBox.Show("yes");
                            }
                            else
                            {
                                MessageBox.Show("nooooooooooooooooooo");
                            }

                        }
                        else
                        {
                            MessageBox.Show("no");
                        }
                        DataTable dt = new DataTable();
                        dt = cu.selectQuinzainesAvalider(matricule);
                        dataGridView1.DataSource = dt;
                        


                    }
                }
                
            }
            return;
        }

        private void pictureBox3_Click(object sender, EventArgs e)
        {
            if (uperPannel.Visible)
            {
                uperPannel.Hide();
            }
            else
            {
                uperPannel.Show();
            }
        }

        private void Rejeter_Click(object sender, EventArgs e)
        {
            Loop:
            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                
                if (Convert.ToBoolean(row.Cells[dataGridView1.Columns["checkBoxCol"].Index].Value))
                {
                    
                    //MessageBox.Show(row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString());
                    crudAlgoClasses.crudUser cu = new crudAlgoClasses.crudUser();
                    bool result = cu.rejectQunzaineSup(row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString());
                    if (result)
                    {
                        MessageBox.Show(row.Cells[dataGridView1.Columns["referance"].Index].Value.ToString() + "  rejetée", "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        DataTable dt = new DataTable();
                        dt = cu.selectQuinzainesAvalider(matricule);
                        dataGridView1.DataSource = dt;
                    }
                    if (Convert.ToBoolean(row.Cells[dataGridView1.Columns["checkBoxCol"].Index].Value))
                    {
                        goto Loop;
                    }
                }

            }
        }

        private void roundBtn3_Click(object sender, EventArgs e)
        {
            crudAlgoClasses.crudUser cu = new crudAlgoClasses.crudUser();
            DataTable dt = new DataTable();

            dt = cu.selectQuinzainesAvalider(matricule);
            dataGridView1.DataSource = dt;
        }

        private void uperPannel_Paint(object sender, PaintEventArgs e)
        {

        }
    }
}
