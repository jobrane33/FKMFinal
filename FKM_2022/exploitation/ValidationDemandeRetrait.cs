using FKM_2022.referntiel;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace FKM_2022.exploitation
{
    public partial class ValidationDemandeRetrait : Form
    {
        private string matricule = connection.getMatricule;
        public ValidationDemandeRetrait()
        {
            InitializeComponent();
            dataGridView1.RowTemplate.Height = 40;
        }

        private void ValidationDemandeRetrait_Load(object sender, EventArgs e)
        {
            using (SqlConnection sqlConnection = new SqlConnection("Data Source=DESKTOP-MOT8LB0;Initial Catalog=FKM;Integrated Security=True"))
            {
                SqlCommand sqlCmd = new SqlCommand("(select matricule ,concat(nom,' ',prenom,' ',matricule) as perso  from personnels where SuperieurhearchiqueDevalidation='" + matricule + "') union ( select matricule , concat(nom,' ',prenom,' ',matricule) as perso from personnels where matricule='" + matricule + "')", sqlConnection);
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = sqlCmd;
                DataTable dt2 = new DataTable();
                da.Fill(dt2);
                comboBox1.DataSource = dt2;
                comboBox1.DisplayMember = "perso";
                comboBox1.ValueMember = "matricule";
                //comboBox2.Items.Add(user + " " + matricule);
                sqlConnection.Open();
                //label1.Text = matricule.ToString();
                comboBox1.Text = "";
            }
            this.refResh();
            
        }

        private void roundBtn1_Click(object sender, EventArgs e)
        {
            crudAlgoClasses.crudUser cru = new crudAlgoClasses.crudUser();
            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {
                if (Convert.ToBoolean(dataGridView1.Rows[i].Cells[dataGridView1.Columns["checkbox"].Index].Value))
                {
                   
                    bool result = cru.validerDemandeAdmin((dataGridView1.Rows[i].Cells[dataGridView1.Columns["code"].Index].Value).ToString(), matricule);
                    if (result)
                    {
                        MessageBox.Show("valider avec success","alert",MessageBoxButtons.OK,MessageBoxIcon.Information);
                        this.refResh();
                    }
                    else
                    {
                        MessageBox.Show("erreur", "alert", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }

        }

        private void Rejeter_Click(object sender, EventArgs e)
        {
            crudAlgoClasses.crudUser cru = new crudAlgoClasses.crudUser();
            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {
                if (Convert.ToBoolean(dataGridView1.Rows[i].Cells[dataGridView1.Columns["checkbox"].Index].Value))
                {

                    bool result = cru.refuserDemandeAdmin((dataGridView1.Rows[i].Cells[dataGridView1.Columns["code"].Index].Value).ToString(), matricule);
                    if (result)
                    {
                        MessageBox.Show("refus avec success", "alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.refResh();
                    }
                    else
                    {
                        MessageBox.Show("erreur", "alert", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }
        }

        private void refResh()
        {
            crudAlgoClasses.crudUser cru = new crudAlgoClasses.crudUser();
            DataTable dt3 = new DataTable();
            dt3 = cru.DemandesAvaliderAdmin(matricule);
            dataGridView1.DataSource = dt3;
        }
        private void roundBtn3_Click(object sender, EventArgs e)
        {
            this.refResh();
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {

            }

        }
    } 
}
